# Generated by Django 4.2.5 on 2024-02-28 06:11

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import mptt.fields


class Migration(migrations.Migration):

    dependencies = [
        ("shopapp", "0001_initial"),
    ]

    operations = [
        migrations.RemoveField(
            model_name="product",
            name="freeDelivery",
        ),
        migrations.AddField(
            model_name="product",
            name="free_delivery",
            field=models.BooleanField(default=True, verbose_name="Бесплатная доставка"),
        ),
        migrations.AlterField(
            model_name="product",
            name="category",
            field=mptt.fields.TreeForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                to="shopapp.category",
                verbose_name="Категория",
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="count",
            field=models.IntegerField(default=0, verbose_name="Количество"),
        ),
        migrations.AlterField(
            model_name="product",
            name="description",
            field=models.TextField(blank=True, verbose_name="Описание"),
        ),
        migrations.AlterField(
            model_name="product",
            name="price",
            field=models.DecimalField(
                decimal_places=2, default=0, max_digits=8, verbose_name="Цена"
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="rating",
            field=models.DecimalField(
                decimal_places=2,
                default=0.0,
                max_digits=3,
                validators=[
                    django.core.validators.MinValueValidator(0),
                    django.core.validators.MaxValueValidator(5),
                ],
                verbose_name="Рейтинг",
            ),
        ),
        migrations.AlterField(
            model_name="product",
            name="tags",
            field=models.ManyToManyField(
                blank=True, related_name="tags", to="shopapp.tag", verbose_name="Тег"
            ),
        ),
    ]
